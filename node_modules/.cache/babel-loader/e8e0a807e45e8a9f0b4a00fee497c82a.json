{"ast":null,"code":"import { REMOVE_FROM_MYLIST } from '../actions/index';\nexport default function (state, action) {\n  switch (action.type) {\n    case REMOVE_FROM_MYLIST:\n      let mylist_ids = state.mylist.map(i => i['id']);\n      let recommendations_ids = state.recommendations.map(i => i['id']);\n\n      if (!(mylist_ids.includes(list.id) && recommendations_ids.includes(list.id))) {\n        setState({\n          mylist: state.mylist.filter(el => el.id !== list.id),\n          recommendations: state.recommendations.concat(list)\n        });\n      }\n\n      return { ...state,\n        ...state.mylist,\n        ...state.recommendations\n      };\n    // default:\n    //     return state;\n  }\n}","map":{"version":3,"sources":["/Volumes/BEAUTY/interview-code/2021-4/Apple/Demo6/src/store/reducers/removeFromMylist.js"],"names":["REMOVE_FROM_MYLIST","state","action","type","mylist_ids","mylist","map","i","recommendations_ids","recommendations","includes","list","id","setState","filter","el","concat"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,kBAAnC;AAEA,eAAe,UAAUC,KAAV,EAAiBC,MAAjB,EAAwB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKH,kBAAL;AACI,UAAII,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAaC,GAAb,CAAiBC,CAAC,IAAEA,CAAC,CAAC,IAAD,CAArB,CAAjB;AACA,UAAIC,mBAAmB,GAAGP,KAAK,CAACQ,eAAN,CAAsBH,GAAtB,CAA0BC,CAAC,IAAEA,CAAC,CAAC,IAAD,CAA9B,CAA1B;;AACA,UAAI,EAAGH,UAAU,CAACM,QAAX,CAAoBC,IAAI,CAACC,EAAzB,CAAD,IAAmCJ,mBAAmB,CAACE,QAApB,CAA6BC,IAAI,CAACC,EAAlC,CAArC,CAAJ,EAAiF;AAC7EC,QAAAA,QAAQ,CAAC;AACLR,UAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAN,CAAaS,MAAb,CAAoBC,EAAE,IAAIA,EAAE,CAACH,EAAH,KAAUD,IAAI,CAACC,EAAzC,CADH;AAELH,UAAAA,eAAe,EAACR,KAAK,CAACQ,eAAN,CAAsBO,MAAtB,CAA6BL,IAA7B;AAFX,SAAD,CAAR;AAIH;;AACL,aAAO,EAAE,GAAGV,KAAL;AAAY,WAAGA,KAAK,CAACI,MAArB;AAA6B,WAAGJ,KAAK,CAACQ;AAAtC,OAAP;AACA;AACA;AAZJ;AAcH","sourcesContent":["import { REMOVE_FROM_MYLIST } from '../actions/index';\n\nexport default function (state, action){\n    switch (action.type) {\n        case REMOVE_FROM_MYLIST:\n            let mylist_ids = state.mylist.map(i=>i['id']);\n            let recommendations_ids = state.recommendations.map(i=>i['id']);\n            if (!((mylist_ids.includes(list.id)) && (recommendations_ids.includes(list.id)))){\n                setState({\n                    mylist: state.mylist.filter(el => el.id !== list.id),\n                    recommendations:state.recommendations.concat(list)\n                })\n            }\n        return { ...state, ...state.mylist, ...state.recommendations }\n        // default:\n        //     return state;\n    }\n} "]},"metadata":{},"sourceType":"module"}