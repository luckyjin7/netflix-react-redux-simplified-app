{"ast":null,"code":"var _jsxFileName = \"/Volumes/BEAUTY/interview-code/2021-4/Apple/Demo6/src/components/Movies.js\";\nimport React, { Component } from 'react';\nimport { bindActionCreators } from \"redux\";\nimport { connect } from 'react-redux';\nimport { fetchMylist } from '../store/actions/index';\nimport axios from 'axios'; // import AddLogo from '../static/imgs/add.svg';\n\nimport RemoveLogo from \"../static/imgs/remove.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Mylist = props => /*#__PURE__*/_jsxDEV(\"div\", {\n  children: /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"movieDisplay__container-img\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      alt: \"movies\",\n      width: \"250\",\n      height: \"400\",\n      src: `${props.mylist.img}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: props.mylist.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        props.removeMylist(props.mylist);\n      },\n      className: \"movieDisplay__container__button-btnMyList\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: RemoveLogo,\n        className: \"movieDisplay__container__button-btnMyList-add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 15\n      }, this), \"Remove From My List\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 5\n}, this);\n\n_c = Mylist;\n\nclass Movies extends Component {\n  constructor(props) {\n    super(props); // this.removeMylist = this.removeMylist.bind(this) \n    // this.addMylist = this.addMylist.bind(this)\n\n    this.state = {\n      mylist: [],\n      recommendations: []\n    };\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:5000/mylist/').then(res => {\n      this.setState({\n        mylist: res.data\n      });\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n\n  myList() {\n    return this.state.mylist.map(currentmylist => {\n      return /*#__PURE__*/_jsxDEV(Mylist, {\n        mylist: currentmylist\n      }, currentmylist._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 18\n      }, this);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"movieDisplay__heading\",\n        children: \"My list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"movieDisplay__container\",\n        children: this.myList()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    mylist: state\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    fetchMylist\n  }, dispatch);\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Movies);\n\nvar _c;\n\n$RefreshReg$(_c, \"Mylist\");","map":{"version":3,"sources":["/Volumes/BEAUTY/interview-code/2021-4/Apple/Demo6/src/components/Movies.js"],"names":["React","Component","bindActionCreators","connect","fetchMylist","axios","Mylist","props","mylist","img","title","removeMylist","RemoveLogo","Movies","constructor","state","recommendations","componentDidMount","get","then","res","setState","data","catch","error","console","log","myList","map","currentmylist","_id","render","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;;;;;AAGA,MAAMC,MAAM,GAAGC,KAAK,iBAChB;AAAA,yBACE;AAAK,IAAA,SAAS,EAAC,6BAAf;AAAA,4BACE;AAAK,MAAA,GAAG,EAAC,QAAT;AAAkB,MAAA,KAAK,EAAC,KAAxB;AAA8B,MAAA,MAAM,EAAC,KAArC;AAA2C,MAAA,GAAG,EAAG,GAAEA,KAAK,CAACC,MAAN,CAAaC,GAAI;AAApE;AAAA;AAAA;AAAA;AAAA,YADF,eAEI;AAAA,gBAAKF,KAAK,CAACC,MAAN,CAAaE;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGM;AAAQ,MAAA,OAAO,EAAE,MAAK;AAAEH,QAAAA,KAAK,CAACI,YAAN,CAAmBJ,KAAK,CAACC,MAAzB;AAAkC,OAA1D;AAA4D,MAAA,SAAS,EAAC,2CAAtE;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEI,UAAV;AAAsB,QAAA,SAAS,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADJ;;KAAMN,M;;AAaN,MAAMO,MAAN,SAAqBZ,SAArB,CAA+B;AAC3Ba,EAAAA,WAAW,CAACP,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;;AACA,SAAKQ,KAAL,GAAa;AACRP,MAAAA,MAAM,EAAC,EADC;AAERQ,MAAAA,eAAe,EAAC;AAFR,KAAb;AAIH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBZ,IAAAA,KAAK,CAACa,GAAN,CAAU,+BAAV,EACCC,IADD,CACMC,GAAG,IAAI;AACT,WAAKC,QAAL,CAAc;AACVb,QAAAA,MAAM,EAACY,GAAG,CAACE;AADD,OAAd;AAGH,KALD,EAMCC,KAND,CAMOC,KAAK,IAAE;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,KARD;AASH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKZ,KAAL,CAAWP,MAAX,CAAkBoB,GAAlB,CAAsBC,aAAa,IAAI;AAC5C,0BAAO,QAAC,MAAD;AAAQ,QAAA,MAAM,EAAEA;AAAhB,SAAoCA,aAAa,CAACC,GAAlD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD,KAFM,CAAP;AAGD;;AAEHC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,uBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA,kBACG,KAAKJ,MAAL;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBADF;AAQD;;AAvC0B;;AA0C7B,MAAMK,eAAe,GAAIjB,KAAD,IAAW;AACjC,SAAO;AAAEP,IAAAA,MAAM,EAAEO;AAAV,GAAP;AACD,CAFD;;AAIA,MAAMkB,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAOhC,kBAAkB,CAAC;AAAEE,IAAAA;AAAF,GAAD,EAAkB8B,QAAlB,CAAzB;AACD,CAFD;;AAIA,eAAe/B,OAAO,CAAC6B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CpB,MAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { bindActionCreators } from \"redux\";\nimport { connect } from 'react-redux';\n\nimport { fetchMylist } from '../store/actions/index';\nimport axios from 'axios';\n\n// import AddLogo from '../static/imgs/add.svg';\nimport RemoveLogo from '../static/imgs/remove.svg';\n\nconst Mylist = props => (\n    <div>\n      <div className=\"movieDisplay__container-img\">\n        <img alt=\"movies\" width=\"250\" height=\"400\" src={`${props.mylist.img}`}/>         \n          <h3>{props.mylist.title}</h3>\n            <button onClick={() =>{ props.removeMylist(props.mylist) }} className=\"movieDisplay__container__button-btnMyList\">\n              <img src={RemoveLogo} className=\"movieDisplay__container__button-btnMyList-add\"/>\n              Remove From My List\n            </button>\n        </div>\n      </div>\n)\n\nclass Movies extends Component {\n    constructor(props) {\n        super(props)\n\n        // this.removeMylist = this.removeMylist.bind(this) \n        // this.addMylist = this.addMylist.bind(this)\n        this.state = {\n             mylist:[],\n             recommendations:[]\n        }\n    }\n\n    componentDidMount() {\n        axios.get('http://localhost:5000/mylist/')\n        .then(res => {\n            this.setState({\n                mylist:res.data\n            })\n        })\n        .catch(error=>{\n            console.log(error)\n        })\n    }\n\n    myList() {\n        return this.state.mylist.map(currentmylist => {\n          return <Mylist mylist={currentmylist} key={currentmylist._id}/>;\n        })\n      }\n\n    render() {\n      return (\n        <>\n          <h1 className=\"movieDisplay__heading\">My list</h1>\n          <div className=\"movieDisplay__container\">\n            {this.myList()}\n          </div>\n        </>\n      )\n    }\n  }\n  \n  const mapStateToProps = (state) => {\n    return { mylist: state}\n  }\n  \n  const mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ fetchMylist }, dispatch)\n  }\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(Movies);"]},"metadata":{},"sourceType":"module"}